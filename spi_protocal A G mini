module spi_state(
    input wire clk,            
    input wire reset,          
    input wire [15:0] datain,  
    output wire spi_cs_l,      
    output wire spi_sclk,      
    output wire spi_data,      
    output wire [4:0] counter  
);

    reg [15:0] MOSI;            
    reg [4:0] count;          
    reg cs_l;                  
    reg sclk;                  
    reg [2:0] state;          

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            MOSI <= 16'b0;
            count <= 5'd16;
            cs_l <= 1'b1;
            sclk <= 1'b0;
            state <= 3'b000;
        end else begin
            case (state)
                3'b000: begin
                    sclk <= 1'b0;  
                    cs_l <= 1'b1;  
                    state <= 3'b001;
                end

                3'b001: begin
                    cs_l <= 1'b0;    
                    MOSI <= datain;  
                    count <= 5'd15;  
                    state <= 3'b010;
                end

                3'b010: begin
                    sclk <= 1'b1;    
                    state <= 3'b011;  
                end

                3'b011: begin
                    sclk <= 1'b0;    
                    if (count > 0) begin
                        count <= count - 1;
                        MOSI <= {MOSI[14:0], 1'b0};  
                        state <= 3'b010;            
                    end else begin
                        count <= 5'd16;            
                        state <= 3'b000;            
                        cs_l <= 1'b1;                
                    end
                end

                default: state <= 3'b000;
            endcase
        end
    end

   
    assign spi_cs_l = cs_l;
    assign spi_sclk = sclk;
    assign spi_data = MOSI[15];  
    assign counter = count;

endmodule
